import AsyncStorage from '@react-native-async-storage/async-storage';
import { Platform } from 'react-native';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API - –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ—Å–ª–µ –¥–µ–ø–ª–æ—è
const API_BASE_URL = __DEV__ ? 'http://10.0.2.2:3000' : 'https://your-railway-app.railway.app';

interface ApiResponse<T = any> {
  success: boolean;
  message?: string;
  data?: T;
  error?: string;
}

interface User {
  id: number;
  username: string;
  full_name: string;
  role: string;
  email?: string;
  phone?: string;
}

interface Location {
  id: number;
  name: string;
  address?: string;
  city?: string;
  description?: string;
  is_active: boolean;
}

interface Recording {
  id: number;
  filename: string;
  duration_seconds?: number;
  file_size: number;
  location_name?: string;
  recording_date: string;
  uploaded_at: string;
  status: string;
  has_transcription: boolean;
  transcribed_at?: string;
}

interface AudioUploadData {
  uri: string;
  type: string;
  name: string;
  duration_seconds?: number;
  location_id?: number;
  recording_date?: string;
}

class ApiService {
  private authToken: string | null = null;

  constructor() {
    this.loadAuthToken();
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è - –∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
  async loadAuthToken(): Promise<void> {
    try {
      this.authToken = await AsyncStorage.getItem('authToken');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–∫–µ–Ω–∞:', error);
    }
  }

  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  setAuthToken(token: string): void {
    this.authToken = token;
    AsyncStorage.setItem('authToken', token);
  }

  // –û—á–∏—Å—Ç–∫–∞ —Ç–æ–∫–µ–Ω–∞
  clearAuthToken(): void {
    this.authToken = null;
    AsyncStorage.removeItem('authToken');
  }

  // –ë–∞–∑–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤
  private async makeRequest<T>(
    endpoint: string,
    options: RequestInit = {}
  ): Promise<T> {
    const url = `${API_BASE_URL}${endpoint}`;
    
    const headers: Record<string, string> = {
      'Content-Type': 'application/json',
      ...options.headers as Record<string, string>,
    };

    if (this.authToken) {
      headers.Authorization = `Bearer ${this.authToken}`;
    }

    try {
      console.log(`üåê API –∑–∞–ø—Ä–æ—Å: ${options.method || 'GET'} ${url}`);
      
      const response = await fetch(url, {
        ...options,
        headers,
      });

      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.message || `HTTP error! status: ${response.status}`);
      }

      return data;
    } catch (error) {
      console.error(`‚ùå API –æ—à–∏–±–∫–∞: ${endpoint}`, error);
      throw error;
    }
  }

  // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
  async login(username: string, password: string): Promise<{ success: boolean; user?: User; token?: string; message?: string }> {
    try {
      const response = await this.makeRequest<any>('/api/auth/login', {
        method: 'POST',
        body: JSON.stringify({ username, password }),
      });

      if (response.success && response.token) {
        this.setAuthToken(response.token);
      }

      return response;
    } catch (error) {
      return {
        success: false,
        message: error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏'
      };
    }
  }

  // –í—ã—Ö–æ–¥
  async logout(): Promise<void> {
    this.clearAuthToken();
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async getProfile(): Promise<{ success: boolean; user?: User; message?: string }> {
    try {
      const response = await this.makeRequest<any>('/api/auth/me');
      return response;
    } catch (error) {
      return {
        success: false,
        message: error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è'
      };
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ª–æ–∫–∞—Ü–∏–π
  async getLocations(): Promise<{ success: boolean; locations?: Location[]; message?: string }> {
    try {
      const response = await this.makeRequest<any>('/api/locations');
      return response;
    } catch (error) {
      return {
        success: false,
        message: error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–∫–∞—Ü–∏–π'
      };
    }
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞
  async uploadAudio(audioData: AudioUploadData): Promise<{ success: boolean; recording?: any; message?: string }> {
    try {
      const formData = new FormData();
      
      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∞–π–ª
      const fileExtension = audioData.name.split('.').pop() || 'm4a';
      const fileName = `recording_${Date.now()}.${fileExtension}`;
      
      formData.append('audio', {
        uri: audioData.uri,
        type: audioData.type || 'audio/m4a',
        name: fileName,
      } as any);

      // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
      if (audioData.duration_seconds) {
        formData.append('duration_seconds', audioData.duration_seconds.toString());
      }
      
      if (audioData.location_id) {
        formData.append('location_id', audioData.location_id.toString());
      }
      
      if (audioData.recording_date) {
        formData.append('recording_date', audioData.recording_date);
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
      const metadata = {
        app_version: '3.0.0',
        platform: Platform.OS,
        uploaded_from: 'mobile_app'
      };
      formData.append('metadata', JSON.stringify(metadata));

      const url = `${API_BASE_URL}/api/recordings/upload`;
      
      const headers: Record<string, string> = {
        'Content-Type': 'multipart/form-data',
      };

      if (this.authToken) {
        headers.Authorization = `Bearer ${this.authToken}`;
      }

      console.log('üì§ –ó–∞–≥—Ä—É–∂–∞–µ–º –∞—É–¥–∏–æ —Ñ–∞–π–ª:', fileName);
      console.log('üìä –†–∞–∑–º–µ—Ä:', audioData.name);
      console.log('üìç –õ–æ–∫–∞—Ü–∏—è:', audioData.location_id);

      const response = await fetch(url, {
        method: 'POST',
        headers,
        body: formData,
      });

      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.message || `HTTP error! status: ${response.status}`);
      }

      console.log('‚úÖ –ê—É–¥–∏–æ —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ');
      return data;

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞—É–¥–∏–æ:', error);
      return {
        success: false,
        message: error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞'
      };
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–ø–∏—Å–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async getRecordings(limit: number = 50, offset: number = 0): Promise<{ success: boolean; recordings?: Recording[]; message?: string }> {
    try {
      const response = await this.makeRequest<any>(`/api/recordings?limit=${limit}&offset=${offset}`);
      return response;
    } catch (error) {
      return {
        success: false,
        message: error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π'
      };
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–ø–∏—Å–µ–π
  async getStats(): Promise<{ success: boolean; stats?: any; message?: string }> {
    try {
      const response = await this.makeRequest<any>('/api/recordings/stats');
      return response;
    } catch (error) {
      return {
        success: false,
        message: error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏'
      };
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏
  async getRecording(id: number): Promise<{ success: boolean; recording?: any; message?: string }> {
    try {
      const response = await this.makeRequest<any>(`/api/recordings/${id}`);
      return response;
    } catch (error) {
      return {
        success: false,
        message: error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏'
      };
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞
  async checkServerHealth(): Promise<{ success: boolean; status?: string; message?: string }> {
    try {
      const response = await this.makeRequest<any>('/health');
      return {
        success: true,
        status: response.status,
        message: '–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç'
      };
    } catch (error) {
      return {
        success: false,
        message: error instanceof Error ? error.message : '–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'
      };
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
export const apiService = new ApiService();
export default apiService; 