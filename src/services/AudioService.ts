import { Audio } from 'expo-av';
import * as FileSystem from 'expo-file-system';
// import { logger } from '../utils/Logger';

// –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–º–µ–Ω–∞ logger –Ω–∞ console –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const logger = {
  info: (msg: string, data?: any) => console.log('‚ÑπÔ∏è', msg, data || ''),
  warn: (msg: string, data?: any) => console.warn('‚ö†Ô∏è', msg, data || ''),
  error: (msg: string, data?: any) => console.error('‚ùå', msg, data || ''),
};

export class AudioService {
  private recording: Audio.Recording | null = null;
  private isRecording = false;

  async requestPermissions(): Promise<boolean> {
    try {
      const { status } = await Audio.requestPermissionsAsync();
      if (status !== 'granted') {
        logger.error('[AudioService] –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –∑–∞–ø–∏—Å—å –∞—É–¥–∏–æ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ');
        return false;
      }
      logger.info('[AudioService] –†–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –∑–∞–ø–∏—Å—å –ø–æ–ª—É—á–µ–Ω—ã');
      return true;
    } catch (error) {
      logger.error('[AudioService] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π', error);
      return false;
    }
  }

  async startRecording(): Promise<string | null> {
    try {
      if (this.isRecording) {
        logger.warn('AudioService', '–ó–∞–ø–∏—Å—å —É–∂–µ –∏–¥–µ—Ç');
        return null;
      }

      // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
      const hasPermission = await this.requestPermissions();
      if (!hasPermission) {
        throw new Error('–ù–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –∑–∞–ø–∏—Å—å –∞—É–¥–∏–æ');
      }

      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞—É–¥–∏–æ —Ä–µ–∂–∏–º –¥–ª—è –∑–∞–ø–∏—Å–∏
      await Audio.setAudioModeAsync({
        allowsRecordingIOS: true,
        playsInSilentModeIOS: true,
        staysActiveInBackground: false,
        playThroughEarpieceAndroid: false,
      });

      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
      const { recording } = await Audio.Recording.createAsync(
        Audio.RecordingOptionsPresets.HIGH_QUALITY
      );

      this.recording = recording;
      this.isRecording = true;
      
      logger.info('AudioService', '–ó–∞–ø–∏—Å—å –Ω–∞—á–∞–ª–∞—Å—å');
      return 'recording'; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º placeholder, –Ω–∞—Å—Ç–æ—è—â–∏–π URI –ø–æ–ª—É—á–∏–º –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
    } catch (error) {
      logger.error('AudioService', '–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –∑–∞–ø–∏—Å–∏', error);
      return null;
    }
  }

  async stopRecording(): Promise<string | null> {
    try {
      if (!this.isRecording || !this.recording) {
        logger.warn('AudioService', '–ó–∞–ø–∏—Å—å –Ω–µ –±—ã–ª–∞ –Ω–∞—á–∞—Ç–∞');
        return null;
      }

      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø–∏—Å—å
      await this.recording.stopAndUnloadAsync();
      
      // –ü–æ–ª—É—á–∞–µ–º URI –∑–∞–ø–∏—Å–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
      const uri = this.recording.getURI();
      
      this.isRecording = false;
      this.recording = null;

      logger.info('AudioService', `–ó–∞–ø–∏—Å—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: ${uri}`);
      return uri;
    } catch (error) {
      logger.error('AudioService', '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –∑–∞–ø–∏—Å–∏', error);
      return null;
    }
  }

  async getRecordingDuration(uri: string): Promise<number> {
    try {
      if (!uri || uri === 'recording') {
        return 0;
      }

      // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Audio.Sound –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
      const { sound } = await Audio.Sound.createAsync({ uri });
      const status = await sound.getStatusAsync();
      
      // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
      await sound.unloadAsync();
      
      if (status.isLoaded && status.durationMillis) {
        logger.info('AudioService', `–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø–∏—Å–∏: ${status.durationMillis}ms`);
        return status.durationMillis;
      }
      
      return 0;
    } catch (error) {
      logger.error('AudioService', '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–ø–∏—Å–∏', error);
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ —Ä–∞–∑–º–µ—Ä—É —Ñ–∞–π–ª–∞
      try {
        const fileInfo = await FileSystem.getInfoAsync(uri);
        if (fileInfo.exists && fileInfo.size) {
          // –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞: 1 —Å–µ–∫—É–Ω–¥–∞ ‚âà 16KB –¥–ª—è m4a
          return Math.max(1000, (fileInfo.size / 16000) * 1000);
        }
      } catch (e) {
        logger.error('AudioService', '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞', e);
      }
      return 1000; // –ú–∏–Ω–∏–º—É–º 1 —Å–µ–∫—É–Ω–¥–∞
    }
  }

  async saveRecordingToDocuments(uri: string, filename: string): Promise<string> {
    try {
      const documentsDir = FileSystem.documentDirectory;
      const recordingsDir = `${documentsDir}recordings/`;
      
      // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∑–∞–ø–∏—Å–µ–π –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
      const dirInfo = await FileSystem.getInfoAsync(recordingsDir);
      if (!dirInfo.exists) {
        await FileSystem.makeDirectoryAsync(recordingsDir, { intermediates: true });
      }
      
      const finalPath = `${recordingsDir}${filename}`;
      
      // –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª –≤ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ –º–µ—Å—Ç–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è
      await FileSystem.copyAsync({
        from: uri,
        to: finalPath,
      });

      logger.info('AudioService', `–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${finalPath}`);
      return finalPath;
    } catch (error) {
      logger.error('AudioService', '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞', error);
      return uri;
    }
  }

  async playRecording(uri: string): Promise<void> {
    try {
      logger.info('AudioService', `–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏: ${uri}`);
      
      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞—É–¥–∏–æ —Ä–µ–∂–∏–º –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
      await Audio.setAudioModeAsync({
        allowsRecordingIOS: false,
        playsInSilentModeIOS: true,
        staysActiveInBackground: false,
        playThroughEarpieceAndroid: false,
      });

      const { sound } = await Audio.Sound.createAsync({ uri });
      await sound.playAsync();
      
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã –ø–æ—Å–ª–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
      sound.setOnPlaybackStatusUpdate((status) => {
        if (status.isLoaded && status.didJustFinish) {
          sound.unloadAsync();
        }
      });
      
      logger.info('AudioService', '–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –Ω–∞—á–∞–ª–æ—Å—å');
    } catch (error) {
      logger.error('AudioService', '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏', error);
      throw error;
    }
  }

  async uploadRecording(
    uri: string, 
    locationId: number, 
    durationSeconds: number
  ): Promise<{ success: boolean; message: string }> {
    try {
      logger.info('AudioService', `üöÄ –ù–ê–ß–ê–õ–û –ó–ê–ì–†–£–ó–ö–ò –° –û–ß–ò–©–ï–ù–ù–´–ú –ö–≠–®–ï–ú: ${uri}`);
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π
      const timestamp = Date.now();
      const randomId = Math.random().toString(36).substring(2, 8);
      const filename = `recording_${timestamp}_${randomId}.m4a`;
      
      logger.info('AudioService', `üìÅ –ò–º—è —Ñ–∞–π–ª–∞: ${filename}`);
      logger.info('AudioService', `üìç –õ–æ–∫–∞—Ü–∏—è: ${locationId}, ‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${durationSeconds}s`);

      // üîë –ö–õ–Æ–ß–ï–í–û–ï –†–ï–®–ï–ù–ò–ï: –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è GraphQL –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ + –æ—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
      const cacheBuster = Date.now().toString();
      const response = await FileSystem.uploadAsync(
        `https://contact-recorder-backend-production.up.railway.app/api/recordings/upload?cb=${cacheBuster}&ts=${timestamp}`,
        uri,
        {
          fieldName: 'audio',
          httpMethod: 'POST',
          uploadType: FileSystem.FileSystemUploadType.MULTIPART,
          parameters: {
            duration_seconds: durationSeconds.toString(),
            location_id: locationId.toString(),
            recording_date: new Date().toISOString(),
            filename: filename,
            cache_buster: cacheBuster,
          },
          headers: {
            'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjEsInVzZXJuYW1lIjoiYWRtaW4iLCJyb2xlIjoiYWRtaW4iLCJpYXQiOjE3NDk2NTc5MDQsImV4cCI6MTc1MDI2MjcwNH0.VR6-NmjphUiJadGUaHTryiWQK8xD7EM2asyJSP2_cMg',
            'Accept': 'application/json',
            'User-Agent': 'ContactRecorder-Mobile/2.0.0',
            
            // üî• –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –û–ß–ò–°–¢–ö–ê –ö–≠–®–ê
            'Cache-Control': 'no-cache, no-store, must-revalidate, max-age=0',
            'Pragma': 'no-cache',
            'Expires': '0',
            'If-Modified-Since': '0',
            'If-None-Match': '',
            
            // üõ°Ô∏è –ó–ê–©–ò–¢–ê –û–¢ GRAPHQL –ò–ù–¢–ï–†–ü–†–ï–¢–ê–¶–ò–ò
            'X-Upload-Type': 'audio-file-multipart',
            'X-Content-Type': 'multipart/form-data',
            'X-API-Version': '1.0',
            'X-Force-Upload': 'true',
            'X-Bypass-GraphQL': 'true',
            'X-Apollo-Operation-Name': '', // –ü—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –æ–±—Ö–æ–¥–∞
            'X-Request-ID': `upload_${timestamp}_${randomId}`,
          },
        }
      );

      logger.info('AudioService', `üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${response.status}`);
      logger.info('AudioService', `üìù –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: ${response.body}`);

      if (response.status === 200 || response.status === 201) {
        try {
          const result = JSON.parse(response.body);
          logger.info('AudioService', '‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ —É—Å–ø–µ—à–Ω–∞!', result);
          return { success: true, message: '–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä' };
        } catch (parseError) {
          logger.warn('AudioService', '‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ —É—Å–ø–µ—à–Ω–∞ (–æ—Ç–≤–µ—Ç –Ω–µ JSON)');
          return { success: true, message: '–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä' };
        }
      } else {
        logger.error('AudioService', `‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${response.status}`, response.body);
        return { 
          success: false, 
          message: `–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${response.status}. ${response.body || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}` 
        };
      }

    } catch (error) {
      logger.error('AudioService', 'üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ó–ê–ì–†–£–ó–ö–ò', error);
      
      let errorMessage = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ';
      if (error instanceof Error) {
        errorMessage = error.message;
      }
      
      return { 
        success: false, 
        message: `–ü—Ä–æ–±–ª–µ–º–∞ —Å –∑–∞–≥—Ä—É–∑–∫–æ–π: ${errorMessage}. –ó–∞–ø–∏—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ.` 
      };
    }
  }

  getIsRecording(): boolean {
    return this.isRecording;
  }
} 